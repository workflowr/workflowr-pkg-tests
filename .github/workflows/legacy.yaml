name: legacy
on:
  workflow_dispatch:
jobs:
  legacy:
    runs-on: ubuntu-18.04
    name: legacy
    env:
      RSPM: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "jdblischak/workflowr"
      - uses: r-lib/actions/setup-r@v1
        id: install-r
        with:
          r-version: 3.3.3
      - uses: r-lib/actions/setup-pandoc@v1
        with:
          pandoc-version: "1.19.2.4"
      - name: Install pak and query dependencies
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          saveRDS(pak::pkg_deps("local::.", dependencies = TRUE), ".github/r-depends.rds")
        shell: Rscript {0}
      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.R_LIBS_USER }}/*
            !${{ env.R_LIBS_USER }}/pak
          key: ubuntu-18.04-${{ steps.install-r.outputs.installed-r-version }}-1-${{ hashFiles('.github/r-depends.rds') }}
          restore-keys: ubuntu-18.04-${{ steps.install-r.outputs.installed-r-version }}-1-
      - name: Install system dependencies
        run: |
          pak::local_system_requirements(execute = TRUE)
          pak::pkg_system_requirements("rcmdcheck", execute = TRUE)
        shell: Rscript {0}
      - name: Install dependencies
        run: |
          pak::local_install_dev_deps(upgrade = TRUE)
          pak::pkg_install("rcmdcheck")
        shell: Rscript {0}
      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}
      - name: Check pandoc installation
        run: |
          pandoc --version
          pandoc-citeproc --version
      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash
      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: legacy-results
          path: check
